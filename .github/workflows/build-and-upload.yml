name: build and upload

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# This controls the concurrency level for the jobs and how it's calculated
concurrency:
  group: ${{ github.workflow }}-${{ github.job }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  

  build-windows-mingw:
    # Name the job more appropriately so we can tell which windows and which MinGW ABI is in use
    name: 'build-mingw (${{ matrix.os }}, ${{ matrix.sys.abi }})'
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Set the shell so run steps will execute from in msys2 correctly by default
    defaults:
      run:
        shell: msys2 {0}

    # We define a matrix of compilers and OS versions to build against so we can cover a variety of
    # suitable compilation environments and early discover issues
    strategy:
      matrix:
        os:
          - windows-2022
        sys:
          - {abi: ucrt64, env: ucrt-x86_64, compiler: gcc}
      fail-fast: false

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Install a suitable system compiler for the build
      - name: Use MinGW from MSYS
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys.abi}}
          update: true
          path-type: inherit
          pacboy: >-
            toolchain:p
            meson:p

      # Build a suitable runtime environment
      - name: Runtime environment
        env:
          WORKSPACE: ${{ github.workspace }}
        # The GITHUB_WORKSPACE step here fixes https://github.com/actions/runner/issues/2058 which is an ongoing issue.
        run: |
          echo "$GITHUB_WORKSPACE=`pwd`" >> $GITHUB_ENV

      # Configure the system toolchain environment
      - name: Setup system GCC
        if: matrix.sys.compiler == 'gcc'
        run: |
          CXX=${CC/#gcc/g++}
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.sys.compiler }}
      - name: Setup system Clang
        if: matrix.sys.compiler == 'clang'
        run: |
          CXX=${CC/#clang/clang++}
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.sys.compiler }}

      # Record the versions of all the tools used in the build
      - name: Version tools
        run: |
          $CC --version
          meson --version
          ninja --version

      # Checkout the repository and branch to build under the default location
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # Build the default BMDA configuration
      - name: Build full BMDA
        run: |
          git fetch --tags
          meson setup build
          meson compile -C build
          mkdir src/artefacts
          mv build/blackmagic.exe src/artefacts/blackmagic-bmda.exe
          mv build/ftd2xx.dll src/artefacts

      # Package up all the artefacts and upload them
      - name: Archive firmware build artefacts as a zip
        uses: actions/upload-artifact@v4
        with:
          name: blackmagic_${{ matrix.os }}-${{ matrix.sys.abi }}-${{ matrix.sys.compiler }}
          path: src/artefacts/*
          if-no-files-found: error

      # Package and upload logs if the build fails so we can dissect why
      - name: Upload failure logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.os }}-${{ matrix.sys.abi }}-${{ matrix.sys.compiler }}
          path: ${{ github.workspace }}/build/meson-logs/*
          retention-days: 5

